{
	"info": {
		"_postman_id": "d47ddf18-71e4-46ca-ba73-a18c4a8cb851",
		"name": "Guest Traveler API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Obtain JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f13dd90-ebba-43d1-afcd-87c2a56a9a14",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"   if(jsonData.hasOwnProperty(\"token\")){",
									"        pm.environment.set(\"AccessToken\", jsonData.token);",
									"     ",
									"   }else{",
									"       return;",
									"       ",
									"   }",
									"   ",
									"    pm.test(\"Access token generated\", function()",
									"    {",
									"        pm.expect(!!jsonData.token).to.eql(true);",
									"    });",
									"    pm.test(\"Content-Type should be present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"",
									"    pm.test(\"Status code should be 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7fac043-3591-478a-8a04-135969aafd01",
								"exec": [
									"",
									"",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json-patch+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "          {\n            \"DeviceId\": \"9999999999999999\",\n            \"osVersion\": \"iOS 13.1.2\",\n            \"language\": \"EN\",\n            \"locale\": \"en_POSIX\",\n            \"region\": \"CA\",\n            \"applicationId\": \"com.guestlogix.Passenger\"\n    \t }"
						},
						"url": {
							"raw": "{{traveler_url}}/auth/token",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for auth"
		},
		{
			"name": "Bad Search, Flight two_Days Past",
			"item": [
				{
					"name": "Bad-Search-flight-2-day past",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d60f951-5844-468b-aca1-c1e231b1fba4",
								"exec": [
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Bad Request errorMessage\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errorMessage).to.eql(\"Date occurs too far in the past, please use a present or future date. Parameter name: departureDate\");",
									"});",
									"//save again"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4bd611bb-bc68-4e4c-abba-4c9922742a5a",
								"exec": [
									"",
									"var current_date = new Date();",
									"",
									"current_date.setDate(current_date.getDate() -2);",
									"var dep_date = current_date;",
									"pm.globals.set(\"bad_dep_date\", dep_date);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "testtesttesttesttest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/flight?flight-number=AC047&departure_date={{bad_dep_date}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"flight"
							],
							"query": [
								{
									"key": "flight-number",
									"value": "AC047"
								},
								{
									"key": "departure_date",
									"value": "{{bad_dep_date}}"
								}
							]
						},
						"description": "request to validate the results for search flight that is  2-day past the current search date.\nValidate the search for flight and catalog items past the current date by 2 days"
					},
					"response": []
				}
			],
			"description": "Return error message for bad request. 400 \"Flight departure day may not be in the past\" ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ddce88e2-b5c1-4f49-b79f-792a813ac88a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b1819e13-a015-4650-9604-96201de6d669",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search-for-flight-num-with-leading -zero",
			"item": [
				{
					"name": "Get-flight-with-leading-zero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f0fd416f-7de2-41cb-a754-933b7f0b79af",
								"exec": [
									"",
									"var current_date = new Date();",
									"pm.globals.set(\"dep_date\", current_date);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e20ae651-2886-4bba-8e75-9d444e7bf1a7",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData[0].hasOwnProperty(\"id\")){",
									"     pm.environment.set(\"flight-id\", jsonData[0].id);",
									"     ",
									"}else",
									"{",
									"    return;",
									"}",
									"    pm.test(\"Status code should be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        ",
									"    });",
									"    ",
									"    pm.test(\"The flight-id should be present\", function(){",
									"        pm.expect(!!jsonData[0].id).to.eql(true);",
									"        ",
									"    });",
									"  ",
									"",
									"",
									"",
									" ",
									" ",
									" ",
									" ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"type": "text",
								"value": "testtesttesttesttest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/flight?flight-number=AC540&departure-date={{dep_date}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"flight"
							],
							"query": [
								{
									"key": "flight-number",
									"value": "AC540"
								},
								{
									"key": "departure-date",
									"value": "{{dep_date}}"
								}
							]
						},
						"description": "Returns a list of flights for provided flight number and date"
					},
					"response": []
				}
			],
			"description": "Returns a list of flights for provided flight number and date\n\nProvided validation test for any flight number that has leading zeros.\nThe expected results for flight number e.g AC047 should be the same as AC47",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "988df449-4f52-4501-ab52-89df0c636415",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f3420664-f1f3-47c8-b582-ba498c12f963",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search-flightNum -without- leadiing-zero",
			"item": [
				{
					"name": "Get Flight-with-flightNum-No-leading-zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86380ee4-78dc-470a-92fd-c8fe0c475ab9",
								"exec": [
									"var jsonData = pm.response.json();",
									"//Change Somethingmm",
									"",
									"",
									" pm.environment.set(\"flight-id\", jsonData[0].id);",
									"    var id = jsonData[0].id;",
									"      pm.test(\"Status code should be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"        ",
									"    });",
									"    ",
									"    pm.test(\"The flight-id present\", function(){",
									"        pm.expect(!!id).to.eql(true);",
									"        ",
									"    });",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "testtesttesttesttest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/flight?flight-number=AC120&departure-date={{dep_date}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"flight"
							],
							"query": [
								{
									"key": "flight-number",
									"value": "AC120"
								},
								{
									"key": "departure-date",
									"value": "{{dep_date}}"
								}
							]
						},
						"description": "Returns a list of flights for provided flight number and date"
					},
					"response": []
				}
			],
			"description": "Validate the results of any flight without leading zeros and harmonized them with one with leading zeros",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "482d8360-2413-4188-9229-2a77273a89d3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c51a031-d325-47f8-8b48-50dfb70de2ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "catalog",
			"item": [
				{
					"name": "Returns a list of flights for provided flight number and date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e1fcc4b-827b-4d3a-8ea0-6314cb7ef38f",
								"exec": [
									"//somethign",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData.hasOwnProperty(\"groups\")){",
									"",
									"    var group = jsonData.groups",
									"    ",
									"    for(var i = 0; i < group.length; i++){",
									"     ",
									"        ",
									"    if(group[i].hasOwnProperty(\"items\"))",
									"    { ",
									"        var items = group[i].items;",
									"        ",
									"        if(items.length === 0){",
									"            ",
									"        }else{",
									"            ",
									"        for(var k = 0; k < items.length; k++){",
									"            ",
									"            if(items[k].hasOwnProperty(\"id\")){",
									"                ",
									"                if(items[k].id !==undefined){",
									"",
									"                    pm.environment.set(\"Item-Id\", items[k].id);",
									"                    break;",
									"                }",
									"               ",
									"        }else{",
									"            return;",
									"            }",
									"        ",
									"    }",
									"        }",
									"    }else{",
									"     return;",
									"    ",
									"    }",
									"    }",
									"       ",
									"  }",
									"",
									"pm.test(\"Status code should be 200\", function ()",
									"{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type should be present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/catalog?flight-id={{flight-id}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"catalog"
							],
							"query": [
								{
									"key": "flight-id",
									"value": "{{flight-id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This catalog folder has catalog request method that use flight-id otain from the flight request api  ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20db87b7-db42-4309-8af8-f96d5f947368",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d9510e43-ebbe-4f53-8220-19429ad5247e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "Returns a catalog item by its id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5439fd47-6ce1-46f1-a0ec-a1e42bdc6197",
								"exec": [
									"",
									"pm.test(\"Status code should 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function (){",
									"    pm.expect(pm.response.responseTime).to.be.above(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"product_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/product/{{Item-Id}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"product",
								"{{Item-Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a catalog schedule given a date range inclusive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88c97fde-ae9d-44e6-bc54-75fe0d930eb1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// if(jsonData[0].hasOwnProperty(\"date\")){",
									"// pm.environment.set(\"pass_date\", jsonData[0].date);",
									"// }else{return;}",
									"",
									"for(var i = 0; i < jsonData.length; i++)",
									"{",
									"    if(jsonData[i].available ===true)",
									"    {",
									"        pm.environment.set(\"pass_date\", jsonData[i].date);",
									"        pm.environment.set(\"time_in_minutes\", jsonData[i].timesInMinutes);",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/product/{{Item-Id}}/schedule?from=2019-01-01&to=2019-02-24",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"product",
								"{{Item-Id}}",
								"schedule"
							],
							"query": [
								{
									"key": "from",
									"value": "2019-01-01"
								},
								{
									"key": "to",
									"value": "2019-02-24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns all catalog item passes given a date and time",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dee0b60c-346d-4a22-bbfa-711660714d9e",
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var data = pm.response.json();",
									"     pm.environment.set(\"pass_id\", data[0].id);",
									"     pm.environment.set(\"pass_price\", data[0].price.value);",
									"     pm.environment.set(\"pass_name\", data[0].name);",
									"",
									"     ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/product/{{Item-Id}}/pass?date={{pass_date}}&time-in-minutes={{time_in_minutes}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"product",
								"{{Item-Id}}",
								"pass"
							],
							"query": [
								{
									"key": "date",
									"value": "{{pass_date}}"
								},
								{
									"key": "time-in-minutes",
									"value": "{{time_in_minutes}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for product"
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Post Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cc234ef-c58a-46f6-ab8a-26349e961175",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time should be  less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"order_Id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"travelerProfileId\": null,\n  \"amount\": {\n    \"value\": {{pass_price}},\n    \"currency\": \"USD\"\n  },\n  \"products\": [\n    {\n      \"id\": \"{{product_id}}\",\n      \"passes\": [\n        {\n          \"id\": \"{{pass_id}}\",\n          \"title\": \"{{pass_name}}\",\n          \"answers\": [\n            {\n              \"id\": \"01-03-Passenger-Gender\",\n              \"value\": \"Mr\"\n            }\n          ],\n          \"upsellAnswers\": []\n        }\n      ]\n    }\n  ],\n  \"customer\": {\n    \"title\": \"Dr.\",\n    \"firstName\": \"D2\",\n    \"lastName\": \"NJ_sqaure\",\n    \"email\": \"d2@test.com\",\n    \"phone\": \"+25472511435\"\n  }\n}"
						},
						"url": {
							"raw": "{{traveler_url}}/order",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"order"
							]
						},
						"description": "Creates a new order"
					},
					"response": []
				},
				{
					"name": "Get order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d74e2d9-0441-42d0-bebf-898ca0bdbcb6",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time should be less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/order/{{order_Id}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"order",
								"{{order_Id}}"
							]
						},
						"description": "Returns an order by id"
					},
					"response": []
				},
				{
					"name": "checkout order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "testtesttesttesttest",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{traveler_url}}/order/{{order_Id}}",
							"host": [
								"{{traveler_url}}"
							],
							"path": [
								"order",
								"{{order_Id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}